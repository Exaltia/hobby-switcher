from blessed import Terminal
import random
import threading
import time, datetime

term = Terminal()
from pygame import mixer

choices = ["Dessiner", "Gaming", "Coder (Perso)", "Ecrire"]
# key_choices is autogenerated below by taking the first letter of every entry in choices, multiples choices from the same first letter is not handled
keys_choices = []
threads_list = []
lastchoice = ""
delay = 3600
last_choice_timestamp = 0


class globaldatas:
    choice_made = False
    infobar = " "


def bottom_term_update_test():
    print(
        term.home
        + term.move_y(term.height - 2)
        + term.white_on_darkolivegreen4(term.center(globaldatas.infobar))
    )
    print(term.home)


def choice_reset():
    while True:
        time.sleep(0.1)
        if (
            last_choice_timestamp
            < round(time.mktime(datetime.datetime.now().timetuple())) - delay
            and globaldatas.choice_made == True
        ):
            # print('yep')
            # time.sleep(5)
            globaldatas.choice_made = False


def timecheck():
    while True:
        if (
            last_choice_timestamp
            < round(time.mktime(datetime.datetime.now().timetuple())) - delay
        ):
            # threading.Thread(target=playsound).start()
            while globaldatas.choice_made == False:
                time.sleep(random.randint(300, 1800))
                threading.Thread(target=playsound).start()


def playsound():
    mixer.init()
    mixer.music.load("./medias/466425__robinhood76__07477-system-confirm-ding.wav")
    mixer.music.set_volume(0.15)
    mixer.music.play()


def keyread():
    with term.cbreak(), term.hidden_cursor():
        inp = term.inkey(timeout=5)
        return inp


threads_list.append(threading.Thread(target=timecheck, daemon=True).start())
threads_list.append(threading.Thread(target=choice_reset, daemon=True).start())
for x in choices:
    first_letter = x[0]
    keys_choices.append(first_letter)
kread = ""
print(term.clear)
with term.cbreak(), term.hidden_cursor():
    while kread != "q":
        kread = term.inkey(timeout=0.1)
        if globaldatas.choice_made == False:
            globaldatas.infobar = " "
            print(term.home)
            for x in choices:
                first_letter = "(" + x[0] + ")"
                print(first_letter + x[1:] + " ")
            if kread in keys_choices:
                last_choice_timestamp = round(
                    time.mktime(datetime.datetime.now().timetuple())
                )
                globaldatas.choice_made = True
            elif kread == "p":
                threading.Thread(target=playsound).start()
        elif globaldatas.choice_made == True:
            globaldatas.infobar = "choice made, press q to quit"
        bottom_term_update_test()
    term.reset()
